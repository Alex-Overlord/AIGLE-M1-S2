(* Propositional Logic *)

Parameters A B : Prop.

Goal A -> A.
Proof.
  intro.
  assumption.
Save prop1.

Print prop1.
Check prop1.

Lemma prop2 : (A -> B) -> A -> B.
Proof.
  intros.
  apply H.
  assumption.
Qed.

Lemma prop2b : (A -> B) -> A -> B.
Proof.
  intros.
  apply (H H0).
Qed.

Lemma prop3 : A /\ B -> A.
Proof.
  intros.
  elim H.
  clear H.
  intros.
  assumption.
Qed.

Lemma prop3b : A /\ B -> A.
Proof.
  intro.
  elim H; intros.
  assumption.
Qed.

Lemma prop4 : A -> B -> A /\ B.
Proof.
  intros.
  split.
  assumption.
  assumption.
Qed.

Lemma prop4b : A -> B -> A /\ B.
Proof.
  intros.
  split; assumption.
Qed.

Lemma prop5 : A \/ B -> B \/ A.
Proof.
  intro.
  elim H.
  intro.
  right.
  assumption.
  intro.
  left.
  assumption.
Qed.

Lemma prop5b : A \/ B -> B \/ A.
Proof. 
  intro.
  elim H; intro; [right | left]; assumption.
Qed.

(* ~A = A -> False *)

Print not.

Lemma prop7 : A -> ~A -> False.
Proof.
  intros.
  unfold not in H0.
  apply (H0 H).
Qed.

Print iff.

Lemma prop8 : A <-> B -> B <-> A.
Proof.
  unfold iff.
  intro.
  elim H; intros; clear H.
  split; assumption.
Qed.

(* Exo du cours *)

Lemma exo1 : A -> B -> A.
Proof.
  intros.
  assumption.
Qed.

Parameters C : Prop.

Lemma exo2 : (A -> B -> C) -> (A -> B) -> A -> C.
Proof.
  intros.
  apply H.
  assumption.
  apply H0.
  assumption.
Qed.

Lemma exo2b : (A -> B -> C) -> (A -> B) -> A -> C.
Proof.
  intros.
  apply (H H1 (H0 H1)).
Qed.

Lemma exo3 : A /\ B -> B.
Proof.
  intros.
  elim H.
  clear H.
  intros.
  assumption.
Qed.

Lemma exo4 : B -> A \/ B.
Proof.
  intros.
  right.
  assumption.
Qed.


Lemma exo5 : (A \/ B) -> (A -> C) -> (B -> C) -> C.
Proof.
  intros.
  elim H; assumption.
Qed.

Lemma exo6 : A -> False -> ~A.
Proof.
  intros.
  auto.
Qed.

Lemma exo7 : False -> A.
Proof.
  intros.
  elimtype False.
  assumption.
Qed.

Lemma exo8 : (A <-> B) -> A -> B.
Proof.
  intros.
  elim H.
  intros.
  apply H1.
  assumption.
Qed.

(*
Lemma exo9 : (A <-> B) -> B -> A.
Proof.
*)

Lemma exo10 : (A -> B) -> (B -> A) -> (A <-> B).
Proof.
  intros.
  split.
  assumption.
  assumption.
Qed.

(* Exo du slide 16 Ã  faire *)

(* pour le 6 *)
Require Export Classical.
Check NNPP.

(* ~~A = ~A -> False *)

(*
Goal A.
Proof.
apply NNPP.
intro.

Goal B.
apply NNPP.
red.
*)



(* First-Order Logic *) 

Parameter E : Set.
Parameter a : E.
Parameter P : E -> Prop.
(*
Lemma fol1 : forall x : E, (P x) -> (P x).
Lemma fol2 : (forall x : E, (P x)) -> (P a).
Lemma fol3 : (
)*